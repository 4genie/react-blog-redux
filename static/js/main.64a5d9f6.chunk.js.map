{"version":3,"sources":["utils.js","WebAPI.js","redux/reducers/userReducer.js","pages/LoginPage/LoginPage.js","pages/RegisterPage/RegisterPage.js","redux/reducers/postReducer.js","pages/HomePage/HomePage.js","pages/PostPage/PostPage.js","pages/AboutPage/AboutPage.js","pages/NewPostPage/NewPostPage.js","pages/EditPostPage/EditPostPage.js","components/Header/Header.js","components/Footer/Footer.js","components/App/App.js","redux/store.js","index.js"],"names":["TOKEN_NAME","setAuthToken","token","localStorage","setItem","getAuthToken","getItem","BASE_URL","getLimitPosts","page","limit","fetch","then","res","json","getMe","headers","authorization","userReducer","createSlice","name","initialState","isLoadingLogin","user","response","errorMessage","reducers","setIsLoadingLogin","state","action","payload","setUser","setResponse","setErrorMessage","setUserLogout","actions","register","username","nickname","password","dispatch","method","body","JSON","stringify","registerAPI","data","ok","message","toString","catch","err","console","log","login","loginAPI","ErrorMessage","styled","div","Title","Form","form","LoginPage","useState","setUsername","setPassword","useSelector","store","users","isSubmit","useRef","history","useHistory","useDispatch","useEffect","id","push","onSubmit","e","preventDefault","current","className","value","onChange","target","required","type","RegisterPage","setNickname","postReducer","isLoadingPost","post","isLoadingNewPost","newPostResponse","isUpdatingPost","allPageNumber","setIsLoadingPost","setPost","setIsLoadingNewPost","setNewPostResponse","setIsUpdatingPost","setAllPageNumber","getPosts","getPostsAPI","totalPages","Math","ceil","get","pages","i","getPages","getPost","getPostAPI","newPost","title","addNewPost","updatePost","editPost","deletePost","deletePostAPI","Root","PostContainer","PostTitle","Link","PostDate","PaginationContainer","PageButton","li","Loading","Post","to","Date","createdAt","toLocaleDateString","HomePage","posts","isLoading","map","onClick","handlePageClick","PostHeader","PostBody","PostDeleteButton","button","PostEditButton","PostPage","useParams","handleDelete","handleEdit","AboutTitle","AboutContent","AboutPage","PageTitle","NewPostPage","setTitle","content","setContent","prevIsLoadingNewPost","ref","usePrevious","placeholder","rows","EditPostPage","textArea","setTextArea","prevIsUpdatingPost","HeaderContainer","Brand","NavbarList","Nav","props","$active","LeftContainer","Header","location","useLocation","pathname","FooterContainer","Footer","App","exact","path","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64a5d9f6.chunk.js","sourcesContent":["const TOKEN_NAME = 'token';\r\n\r\n// save token to localStorage\r\nexport const setAuthToken = (token) => {\r\n  localStorage.setItem(TOKEN_NAME, token);\r\n};\r\n\r\n// extract token from localStorage\r\nexport const getAuthToken = () => {\r\n  return localStorage.getItem(TOKEN_NAME);\r\n};\r\n\r\n// get pages's array from total page count\r\nexport const getPages = (totalPages) => {\r\n  let pages = [];\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pages.push(i);\r\n  }\r\n  return pages;\r\n};\r\n","import { getAuthToken } from './utils';\r\n\r\n// api URL\r\nconst BASE_URL = 'https://student-json-api.lidemy.me';\r\n\r\n// 拿到所有的文章\r\n// export const getPosts = () => {\r\n//   return fetch(`${BASE_URL}/posts?_sort=createdAt&_order=desc`).then((res) =>\r\n//     res.json()\r\n//   );\r\n// };\r\n\r\nexport const getPosts = (limit) => {\r\n  return fetch(`${BASE_URL}/posts?_limit=${limit}&_sort=createdAt&_order=desc`);\r\n};\r\n\r\n// 根據參數 id, 拿到特定的一篇文章\r\nexport const getPost = (id) => {\r\n  return fetch(`${BASE_URL}/posts?id=${id}`).then((res) => res.json());\r\n};\r\n\r\n// 根據參數 page、limit 拿到限定第幾頁且每頁多少篇的文章\r\nexport const getLimitPosts = (page, limit) =>\r\n  fetch(\r\n    `${BASE_URL}/posts?_page=${page}&_limit=${limit}&_sort=createdAt&_order=desc`\r\n  ).then((res) => res.json());\r\n\r\n// 新增文章\r\nexport const addNewPost = (title, body) => {\r\n  // 拿到 localStorage 中的身份驗證 token\r\n  const token = getAuthToken();\r\n  // 用 POST 方法，將 token、文章標題 title、文章內容 body 上傳到 API\r\n  return fetch(`${BASE_URL}/posts`, {\r\n    method: 'POST',\r\n\r\n    headers: {\r\n      'content-type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n\r\n    body: JSON.stringify({\r\n      title,\r\n      body,\r\n    }),\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 編輯文章\r\nexport const editPost = (id, title, body) => {\r\n  return fetch(`${BASE_URL}/posts/${id}`, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'content-type': 'application/json',\r\n    },\r\n\r\n    body: JSON.stringify({\r\n      title,\r\n      body,\r\n    }),\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 刪除文章\r\nexport const deletePost = (id) => {\r\n  return fetch(`${BASE_URL}/posts/${id}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'content-type': 'application/json',\r\n    },\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 註冊\r\nexport const register = (username, nickname, password) => {\r\n  // 用 POST 方法，將 username、nickname、password 上傳到 API\r\n  return fetch(`${BASE_URL}/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      username,\r\n      nickname,\r\n      password,\r\n    }),\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 登入\r\nexport const login = (username, password) => {\r\n  // 用 POST 方法，將 username、password 上傳到 API\r\n  return fetch(`${BASE_URL}/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      username,\r\n      password,\r\n    }),\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 身份驗證\r\nexport const getMe = () => {\r\n  // 拿到 localStorage 中的身份驗證 token 內容\r\n  const token = getAuthToken();\r\n  // 在 headers 裡帶入 token，進行驗證\r\n  return fetch(`${BASE_URL}/me`, {\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  }).then((res) => res.json());\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport {\r\n  register as registerAPI,\r\n  login as loginAPI,\r\n  getMe,\r\n} from '../../WebAPI';\r\nimport { setAuthToken } from '../../utils';\r\n\r\nexport const userReducer = createSlice({\r\n  // 設定 name 以及初始的 state\r\n  name: 'users',\r\n  initialState: {\r\n    isLoadingLogin: false,\r\n    user: null,\r\n    response: null,\r\n    errorMessage: null,\r\n  },\r\n  // 設定接收到不同的 action 後，reducer 會對 state 做的處理\r\n  reducers: {\r\n    setIsLoadingLogin: (state, action) => {\r\n      state.isLoadingLogin = action.payload;\r\n    },\r\n    setUser: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    setResponse: (state, action) => {\r\n      state.response = action.payload;\r\n    },\r\n    setErrorMessage: (state, action) => {\r\n      state.errorMessage = action.payload;\r\n    },\r\n    setUserLogout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setIsLoadingLogin,\r\n  setUser,\r\n  setResponse,\r\n  setErrorMessage,\r\n  setUserLogout,\r\n} = userReducer.actions;\r\n\r\n// 註冊\r\nexport const register = (username, nickname, password) => (dispatch) => {\r\n  dispatch(setIsLoadingLogin(true));\r\n  // 執行 register 的 API，並將 username, nickname, password 帶入\r\n  registerAPI(username, nickname, password)\r\n    .then((data) => {\r\n      // 如果有錯\r\n      if (data.ok === 0) {\r\n        dispatch(setIsLoadingLogin(false));\r\n        // 回傳錯誤訊息\r\n        // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n        return dispatch(setErrorMessage(data.message));\r\n      }\r\n      // 否則將回傳的 token 存到 localStorage\r\n      setAuthToken(data.token);\r\n      // 將 token 帶回 API，以進行身份驗證\r\n      getMe().then((response) => {\r\n        dispatch(setIsLoadingLogin(true));\r\n        // 如果身份驗證有誤\r\n        if (response.ok !== 1) {\r\n          // token 清空\r\n          setAuthToken(null);\r\n          dispatch(setIsLoadingLogin(false));\r\n          // 如果有錯，回傳錯誤訊息\r\n          // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n          return dispatch(setErrorMessage(response.toString()));\r\n        }\r\n        // 身份驗證通過：更新 user 的 state\r\n        dispatch(setUser(response.data));\r\n        dispatch(setIsLoadingLogin(false));\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(setIsLoadingLogin(false));\r\n    });\r\n};\r\n\r\n// 登入\r\nexport const login = (username, password) => (dispatch) => {\r\n  dispatch(setIsLoadingLogin(true));\r\n  // 執行 loginAPI 的 API，並將 username, password 帶入\r\n  loginAPI(username, password)\r\n    .then((data) => {\r\n      // 如果有錯\r\n      if (data.ok === 0) {\r\n        dispatch(setIsLoadingLogin(false));\r\n        // 回傳錯誤訊息\r\n        // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n        return dispatch(setErrorMessage(data.message));\r\n      }\r\n      // 否則將回傳的 token 存到 localStorage\r\n      setAuthToken(data.token);\r\n      // 將 token 帶回 API，以進行身份驗證\r\n      getMe().then((response) => {\r\n        dispatch(setIsLoadingLogin(true));\r\n        // 如果身份驗證有誤\r\n        if (response.ok !== 1) {\r\n          setAuthToken(null);\r\n          dispatch(setIsLoadingLogin(false));\r\n          // 回傳錯誤訊息\r\n          // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n          return dispatch(setErrorMessage(response.toString()));\r\n        }\r\n        // 身份驗證通過：更新 user 的 state\r\n        dispatch(setUser(response.data));\r\n        dispatch(setIsLoadingLogin(false));\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(setIsLoadingLogin(false));\r\n    });\r\n};\r\n\r\n// set token\r\nexport const getToken = () => (dispatch) => {\r\n  // 執行 getMe 的 API\r\n  getMe().then((response) => {\r\n    dispatch(setIsLoadingLogin(true));\r\n    // 如果身份驗證有誤\r\n    if (response.ok !== 1) {\r\n      // token 清空\r\n      setAuthToken(null);\r\n      dispatch(setIsLoadingLogin(false));\r\n      // 回傳錯誤訊息\r\n      // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n      return dispatch(setErrorMessage(response.toString()));\r\n    }\r\n\r\n    // 身份驗證通過：更新 user 的 state\r\n    dispatch(setUser(response.data));\r\n    dispatch(setIsLoadingLogin(false));\r\n  });\r\n};\r\n\r\nexport default userReducer.reducer;\r\n","import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, setErrorMessage } from '../../redux/reducers/userReducer';\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\nconst Title = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: 36px;\n  text-weight: 600;\n`;\nconst Form = styled.form`\n  width: 30%;\n  min-width: 300px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin: 40px auto;\n  padding: 40px;\n  justify-content: space-between;\n  min-height: 110px;\n  border: 1.2px solid rgba(200, 200, 200, 0.5);\n  box-shadow: 1px 1px 3px #fbfbfb;\n  border-radius: 5px;\n  font-family: '微軟正黑體';\n`;\n\nexport default function LoginPage() {\n  // 設定 username 的 state\n  const [username, setUsername] = useState('');\n  // 設定 password 的 state\n  const [password, setPassword] = useState('');\n\n  // 設定變數 user，從 store 的 users 中拿到 user 的 state\n  const user = useSelector((store) => store.users.user);\n\n  // 設定變數 errorMessage，從 store 的 users 中拿到 errorMessage 的 state\n  const errorMessage = useSelector((store) => store.users.errorMessage);\n\n  // 是否正在點擊'Log In'按鈕，預設為 false\n  const isSubmit = useRef(false);\n\n  const history = useHistory();\n\n  // 設定變數 dispatch，之後可以將 action 傳送到 reducer 中\n  const dispatch = useDispatch();\n\n  // 執行登入功能\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // 將錯誤訊息清除\n    //dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\n    dispatch(setErrorMessage(null));\n\n    // 如果正在點擊 'Log In' 按鈕，不進行任何動作\n    if (isSubmit.current) return;\n\n    // 否則，將正在點擊 'Log In' 按鈕狀態設為 true\n    isSubmit.current = true;\n\n    // 登入：dispatch 一個名為 'login' 的 action 到 userReducer，並將 username、password 帶入 action 中\n    dispatch(login(username, password));\n\n    //執行完上述後，將正在點擊'Log in'按鈕的狀態，設回 false\n    isSubmit.current = false;\n  };\n\n  // log in 後清除 errorMessage\n  // => 將 setErrorMessage 清空\n  useEffect(() => {\n    return () => {\n      dispatch(setErrorMessage(null));\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (user && user.id) {\n      history.push('/');\n    }\n  }, [user, history]);\n\n  return (\n    <>\n      <Title>Log In</Title>\n      {/* 點擊 Log In 按鈕提交後，表單執行 handleSubmit() */}\n      <Form onSubmit={handleSubmit}>\n        <div>\n          username :{' '}\n          <input\n            className=\"form-input\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          password :{' '}\n          <input\n            className=\"form-input\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"form-btn\">\n          Log In\n        </button>\n\n        {/* 有錯誤訊息時，顯示在此 */}\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </Form>\n    </>\n  );\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register, setErrorMessage } from '../../redux/reducers/userReducer';\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nconst Title = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: 36px;\n  text-weight: 600;\n`;\n\nconst Form = styled.form`\n  width: 30%;\n  min-width: 300px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin: 40px auto;\n  padding: 40px;\n  justify-content: space-between;\n  min-height: 110px;\n  border: 1.2px solid rgba(200, 200, 200, 0.5);\n  box-shadow: 1px 1px 3px #fbfbfb;\n  border-radius: 5px;\n  font-family: '微軟正黑體';\n`;\n\nexport default function RegisterPage() {\n  // 設定 username 的 state\n  const [username, setUsername] = useState('');\n  // 設定 nickname 的 state\n  const [nickname, setNickname] = useState('');\n  // 設定 password 的 state\n  const [password, setPassword] = useState('');\n\n  // 設定變數 user，從 store 的 users 中拿到 user 的 state\n  const user = useSelector((store) => store.users.user);\n\n  // 設定變數 errorMessage，從 store 的 users 中拿到 errorMessage 的 state\n  const errorMessage = useSelector((store) => store.users.errorMessage);\n\n  // 是否正在點擊'Sign Up'按鈕，預設為 false\n  const isSubmit = useRef(false);\n\n  const history = useHistory();\n\n  // 設定變數 dispatch，之後可以將 action 傳送到 reducer 中\n  const dispatch = useDispatch();\n\n  // 執行註冊功能\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // 將錯誤訊息清除\n    //dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\n    dispatch(setErrorMessage(null));\n\n    // 如果正在點擊 'Sign Up' 按鈕，不進行任何動作\n    if (isSubmit.current) return;\n\n    // 否則，將正在點擊 'Sign Up' 按鈕狀態設為 true\n    isSubmit.current = true;\n\n    // 註冊：dispatch 一個名為 'register' 的 action 到 userReducer，並將 username、nickname、password 帶入 action 中\n    dispatch(register(username, nickname, password));\n\n    //執行完上述後，將正在點擊'Sign Up'按鈕的狀態，設回 false\n    isSubmit.current = false;\n  };\n\n  // Sign up 後清除 errorMessage\n  // => 將 setErrorMessage 清空\n  useEffect(() => {\n    return () => {\n      dispatch(setErrorMessage(null));\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (user && user.id) {\n      history.push('/');\n    }\n  }, [user, history]);\n\n  return (\n    <>\n      <Title>Sign Up</Title>\n      {/* 點擊 Sign Up 按鈕提交後，表單執行 handleSubmit() */}\n      <Form onSubmit={handleSubmit}>\n        <div>\n          username:{' '}\n          <input\n            className=\"form-input\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          nickname:{' '}\n          <input\n            className=\"form-input\"\n            value={nickname}\n            onChange={(e) => setNickname(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          password:{' '}\n          <input\n            className=\"form-input\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"form-btn\">\n          Sign Up\n        </button>\n\n        {/* 有錯誤訊息時，顯示在此 */}\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </Form>\n    </>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport {\r\n  getPosts as getPostsAPI,\r\n  getPost as getPostAPI,\r\n  addNewPost,\r\n  editPost,\r\n  deletePost as deletePostAPI,\r\n  getLimitPosts,\r\n} from '../../WebAPI';\r\n\r\nimport { getPages } from '../../utils';\r\n\r\nexport const postReducer = createSlice({\r\n  // 設定 name 以及初始的 state\r\n  name: 'posts',\r\n  initialState: {\r\n    isLoadingPost: false,\r\n    post: null,\r\n\r\n    isLoadingNewPost: false,\r\n    newPostResponse: null,\r\n\r\n    isUpdatingPost: false,\r\n    errorMessage: null,\r\n    limit: 5,\r\n    allPageNumber: [],\r\n  },\r\n\r\n  // 設定接收到不同的 action 後，reducer 會對 state 做的處理\r\n  reducers: {\r\n    setIsLoadingPost: (state, action) => {\r\n      state.isLoadingPost = action.payload;\r\n    },\r\n    setPost: (state, action) => {\r\n      state.post = action.payload;\r\n    },\r\n    setIsLoadingNewPost: (state, action) => {\r\n      state.isLoadingNewPost = action.payload;\r\n    },\r\n    setNewPostResponse: (state, action) => {\r\n      state.newPostResponse = action.payload;\r\n    },\r\n    setIsUpdatingPost: (state, action) => {\r\n      state.isUpdatingPost = action.payload;\r\n    },\r\n    setErrorMessage: (state, action) => {\r\n      state.errorMessage = action.payload;\r\n    },\r\n    setAllPageNumber: (state, action) => {\r\n      state.allPageNumber = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setIsLoadingPost,\r\n  setPost,\r\n  setNewPostResponse,\r\n  setIsLoadingNewPost,\r\n  setIsUpdatingPost,\r\n  setErrorMessage,\r\n  setAllPageNumber,\r\n} = postReducer.actions;\r\n\r\n// 拿到全部文章：\r\nexport const getPosts = (limit) => (dispatch) => {\r\n  dispatch(setIsLoadingPost(true));\r\n  // 執行 getPosts 的 API，並將 limit 帶入\r\n  return getPostsAPI(limit)\r\n    .then((res) => {\r\n      // 如果有錯\r\n      if (res.ok === 0) {\r\n        dispatch(setIsLoadingPost(false));\r\n        // 回傳錯誤訊息\r\n        // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n        return dispatch(setErrorMessage(res.message));\r\n      }\r\n      // 如果 API 連線成功\r\n      // 總頁數由 response 的 header 中 \"x-total-count\" 取得總共的留言筆數，然後再除以每頁的筆數，無條件進位\r\n      let totalPages = Math.ceil(res.headers.get('x-total-count') / limit);\r\n\r\n      // 更新 allPageNumber 的狀態\r\n      dispatch(setAllPageNumber(getPages(totalPages)));\r\n      return res.json();\r\n    })\r\n    .then((data) => {\r\n      // 到第一頁\r\n      // 執行 getLimitPosts 的 API，並將 1、 limit 帶入\r\n      getLimitPosts(1, limit).then((data) => {\r\n        // 更新 post 的 state 為從 getPost API 接收到的資料\r\n        dispatch(setPost(data));\r\n        dispatch(setIsLoadingPost(false));\r\n        // 回傳接收到的資料\r\n        return data;\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(setIsLoadingPost(false));\r\n    });\r\n};\r\n\r\n// 拿到單一文章：\r\nexport const getPost = (id) => (dispatch) => {\r\n  dispatch(setIsLoadingPost(true));\r\n  // 執行 getPost 的 API，並將 id 帶入\r\n  return getPostAPI(id)\r\n    .then((res) => {\r\n      // 如果有錯\r\n      if (res.ok === 0) {\r\n        dispatch(setIsLoadingPost(false));\r\n        // 回傳錯誤訊息\r\n        // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n        return dispatch(setErrorMessage(res.message));\r\n      }\r\n\r\n      // 否則，更新 post 的 state 為從 getPost API 接收到的資料\r\n      dispatch(setPost(res));\r\n      dispatch(setIsLoadingPost(false));\r\n      // 回傳接收到的資料\r\n      return res;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(setIsLoadingPost(false));\r\n    });\r\n};\r\n\r\n// 新增文章：\r\nexport const newPost = (title, body) => (dispatch) => {\r\n  dispatch(setIsLoadingNewPost(true));\r\n  // 執行 addNewPost 的 API，並將 title、body 帶入\r\n  return addNewPost(title, body).then((res) => {\r\n    // 如果有錯\r\n    if (res.ok === 0) {\r\n      dispatch(setIsLoadingPost(false));\r\n      // 回傳錯誤訊息\r\n      // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n      return dispatch(setErrorMessage(res.message));\r\n    }\r\n\r\n    // 否則，更新 newPostResponse 的 state 為從 addNewPost 接收到的資料\r\n    dispatch(setNewPostResponse(res));\r\n    dispatch(setIsLoadingNewPost(false));\r\n    // 回傳接收到的資料\r\n    return res;\r\n  });\r\n};\r\n\r\n// 編輯文章：\r\nexport const updatePost = (id, title, body) => (dispatch) => {\r\n  dispatch(setIsUpdatingPost(true));\r\n  // 執行 editPost 的 API，並將 id、 title、body 帶入\r\n  return editPost(id, title, body)\r\n    .then((res) => {\r\n      // 如果有錯\r\n      if (res.ok === 0) {\r\n        dispatch(setIsLoadingPost(false));\r\n        // 回傳錯誤訊息\r\n        // dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\r\n        return dispatch(setErrorMessage(res.message));\r\n      }\r\n      // 否則，更新 newPostResponse 的 state 為從 editPost 接收到的資料\r\n      dispatch(setNewPostResponse(res));\r\n      dispatch(setIsUpdatingPost(false));\r\n      // 回傳接收到的資料\r\n      return res;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(setIsLoadingPost(false));\r\n    });\r\n};\r\n\r\n// 刪除文章：\r\nexport const deletePost = (id) => (dispatch) => {\r\n  // 執行 deletePost 的 API，並將 id 帶入\r\n  // 然後回傳接收到的資料\r\n  return deletePostAPI(id).then((res) => res);\r\n};\r\n\r\nexport default postReducer.reducer;\r\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getLimitPosts } from '../../WebAPI';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getPosts, setPost } from '../../redux/reducers/postReducer';\n\n// import { getPosts, setActivePage } from '../../redux/reducers/postReducer';\n\nconst Root = styled.div`\n  width: 75%;\n  margin: 0 auto;\n`;\nconst PostContainer = styled.div`\n  border-bottom: solid 1px rgba(0, 12, 34, 0.2);\n  padding: 16px;\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n\n  &:hover {\n    background-color: rgba(0, 12, 34, 0.07);\n  }\n`;\nconst PostTitle = styled(Link)`\n  font-size: 24px;\n  color: #333;\n  text-decoration: none;\n`;\n\nconst PostDate = styled.div`\n  color: rgba(0, 0, 0, 0.8);\n`;\n\nconst PaginationContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst PageButton = styled.li`\n  width: 45px;\n  height: 45px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  cursor: pointer;\n  outline: transparent;\n  border: solid 1px rgba(0, 12, 34, 0.1);\n  margin-top: 20px;\n\n  &:hover {\n    background-color: rgba(0, 12, 34, 0.07);\n  }\n`;\n\nconst Loading = styled.div`\n  margin-top: 30px;\n  display: flex;\n  justify-content: center;\n  align-item: center;\n  font-size: 28px;\n`;\n\n// 接收從 HomePage props.post\nfunction Post({ post }) {\n  return (\n    <PostContainer>\n      <PostTitle to={`/posts/${post.id}`}>{post.title}</PostTitle>\n      <PostDate>{new Date(post.createdAt).toLocaleDateString()}</PostDate>\n    </PostContainer>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.object,\n};\n\nexport default function HomePage() {\n  // 設定變數 dispatch，之後可以將 action 傳送到 reducer 中\n  const dispatch = useDispatch();\n\n  // 設定變數 post，從 store 的 posts 中拿到 post 的 state\n  const posts = useSelector((store) => store.posts.post);\n\n  // 設定每頁顯示多少筆\n  // 設定變數 limit，從 store 的 posts 中拿到 limit 的 state\n  const limit = useSelector((store) => store.posts.limit);\n\n  // 設定變數 pages，從 store 的 posts 中拿到 pages 的 state\n  const pages = useSelector((store) => store.posts.allPageNumber);\n\n  // 設定變數 isLoading，從 store 的 posts 中拿到 isLoading 的 state\n  const isLoading = useSelector((store) => store.posts.isLoadingPost);\n\n  // console.log(posts);\n  // console.log(pages);\n\n  // 拿到所有頁面的內容：\n  //dispatch 一個名為 'getPosts' 的 action 到 postReducer，並將 limit 帶入 action 中\n\n  useEffect(() => {\n    dispatch(getPosts(limit));\n  }, [dispatch, limit]);\n\n  // 點擊頁碼按鈕後，執行 handlePageClick()\n  const handlePageClick = (page) => {\n    // 根據參數 page、limit 拿到限定第幾頁且每頁多少篇的文章\n    // 執行 getLimitPosts 的 API，並將 page、 limit 帶入\n    getLimitPosts(page, limit).then((posts) =>\n      //dispatch 一個名為 'setPost' 的 action 到 postReducer，並將回傳的資料帶入 action 中\n      dispatch(setPost(posts))\n    );\n  };\n\n  return (\n    <Root>\n      {/* 若在載入中，尚未從 API 中取得任何資料，顯示 '正在載入中' */}\n      {isLoading && <Loading>正在載入中...</Loading>}\n\n      {/* 若已從 API 拿到資料，將每一筆資料透過 props.post 帶到 Post 這個 component， */}\n      {!isLoading &&\n        posts &&\n        posts.map((post) => <Post key={post.id} post={post} />)}\n\n      {/* 顯示頁數 */}\n      <PaginationContainer>\n        {posts &&\n          pages.map((page) => (\n            // 點擊頁碼按鈕時，執行 handlePageClick()\n            <PageButton key={page} onClick={() => handlePageClick(page)}>\n              {page}\n            </PageButton>\n          ))}\n      </PaginationContainer>\n    </Root>\n  );\n}\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { getPost, deletePost } from '../../redux/reducers/postReducer';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Root = styled.div`\n  width: 75%;\n  margin: 0 auto;\n`;\n\nconst PostContainer = styled.div`\n  padding: 16px;\n  margin: 8px auto;\n  max-width: 960px;\n`;\n\nconst PostHeader = styled.div`\n  padding: 16px 0;\n`;\n\nconst PostTitle = styled.div`\n  font-size: 28px;\n  font-weight: 700;\n  color: #333;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst PostDate = styled.div`\n  color: rgba(0, 0, 0, 0.8);\n  margin-top: 10px;\n`;\n// const PostTitle = styled.div.attrs({\n//   className: 'form-title',\n// })``;\n\nconst PostBody = styled.div`\n  text-align: justify;\n  font-size: 20px;\n  letter-spacing: 3px;\n  line-height: 1.5;\n  white-space: pre-wrap;\n`;\n\nconst PostDeleteButton = styled.button`\n  border: none;\n  height: 35px;\n  width: 100px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-left: 20px;\n  &:hover {\n    background-color: rgba(0, 12, 34, 0.1);\n  }\n`;\n\nconst PostEditButton = styled.button`\n  border: none;\n  height: 35px;\n  width: 100px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-left: 20px;\n  &:hover {\n    background-color: rgba(0, 12, 34, 0.1);\n  }\n`;\n\nconst Loading = styled.div`\n  margin-top: 30px;\n  display: flex;\n  justify-content: center;\n  align-item: center;\n  font-size: 28px;\n`;\n\nexport default function PostPage() {\n  // 設定變數 dispatch，之後可以將 action 傳送到 reducer 中\n  const dispatch = useDispatch();\n  // 設定 title 的 state\n\n  // 設定變數 user，從 store 的 users 中拿到 user 的 state\n  const user = useSelector((store) => store.users.user);\n\n  // 設定變數 post，從 store 的 posts 中拿到 post 的 state\n  const post = useSelector((store) => store.posts.post);\n\n  // 設定變數 isLoading，從 store 的 posts 中拿到 isLoading 的 state\n  const isLoading = useSelector((store) => store.posts.isLoadingPost);\n\n  // 取得 URL 上 id 的參數\n  const { id } = useParams();\n\n  const history = useHistory();\n  console.log(post);\n\n  // 拿到某單一文章的內容：\n  //dispatch 一個名為 'getPost' 的 action 到 postReducer，並將 id 帶入 action 中\n  useEffect(() => {\n    dispatch(getPost(id));\n    //dependency： 當偵測到 id、dispatch 改變時才重新渲染\n  }, [id, dispatch]);\n\n  // 執行刪除功能\n  const handleDelete = (id) => {\n    //dispatch 一個名為 'deletePost' 的 action 到 postReducer，並將 id 帶入 action 中\n    dispatch(deletePost(id));\n\n    // 刪除成功後轉到首頁\n    history.push('/');\n  };\n\n  // 執行編輯功能\n  const handleEdit = (id) => {\n    // ，點擊後，前往編輯頁面\n    history.push('/edit-post/' + id);\n  };\n\n  return (\n    <Root>\n      {/* 若在載入中，尚未從 API 中取得任何資料，顯示 ' 正在載入中 ' */}\n      {isLoading && <Loading> 正在載入中...</Loading>}\n\n      {/* 若已從 API 拿到資料，顯示文章內容 */}\n      {!isLoading && (\n        <PostContainer>\n          <PostHeader>\n            <PostTitle>\n              {post && post[0].title}\n              {user && (\n                <>\n                  <div>\n                    {/* 點擊 ' 刪除此文 ' 按鈕時，執行 handleDelete */}\n                    <PostDeleteButton onClick={() => handleDelete(id)}>\n                      {' '}\n                      刪除此文{' '}\n                    </PostDeleteButton>\n                    {/* 點擊 ' 編輯此文 ' 按鈕時，執行 handleEdit */}\n                    <PostEditButton onClick={() => handleEdit(id)}>\n                      {' '}\n                      編輯此文{' '}\n                    </PostEditButton>\n                  </div>\n                </>\n              )}\n            </PostTitle>\n            <PostDate>\n              {post && new Date(post[0].createdAt).toLocaleDateString()}\n            </PostDate>\n          </PostHeader>\n          <PostBody>{post && post[0].body}</PostBody>\n        </PostContainer>\n      )}\n    </Root>\n  );\n}\n","import styled from 'styled-components';\r\n\r\nconst Root = styled.div`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n`;\r\nconst AboutTitle = styled.div`\r\n  margin: 40px 0;\r\n  font-size: 36px;\r\n`;\r\nconst AboutContent = styled.div`\r\n  font-size: 24px;\r\n  padding: 30px;\r\n`;\r\n\r\nexport default function AboutPage() {\r\n  return (\r\n    <Root>\r\n      <AboutTitle>This Blog</AboutTitle>\r\n      <AboutContent>\r\n        Build up with React , and only for practicing use\r\n      </AboutContent>\r\n    </Root>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport { newPost, setErrorMessage } from '../../redux/reducers/postReducer';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nconst PageTitle = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: 36px;\n  text-weight: 600;\n`;\n\nconst Form = styled.form`\n  width: 50%;\n  min-width: 40px;\n  display: flex;\n  flex-direction: column;\n  margin: 40px auto;\n  padding: 40px;\n  min-height: 360px;\n  border: 1.2px solid rgba(200, 200, 200, 0.5);\n  box-shadow: 1px 1px 3px #fbfbfb;\n  border-radius: 5px;\n  font-family: '微軟正黑體';\n`;\n\n// 儲存上一個 state 狀態的 hook （引用別人事先寫好的）\nfunction usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport default function NewPostPage() {\n  // 設定 title 的 state\n  const [title, setTitle] = useState('');\n  // 設定 content 的 state\n  const [content, setContent] = useState('');\n\n  // 設定變數 dispatch，之後可以將 action 傳送到 reducer 中\n  const dispatch = useDispatch();\n\n  // 設定變數 newPostResponse，從 store 的 posts 中拿到 newPostResponse 的 state\n  const newPostResponse = useSelector((store) => store.posts.newPostResponse);\n\n  // 設定變數 isLoadingNewPost，從 store 的 posts 中拿到 isLoadingNewPost 的 state\n  const isLoadingNewPost = useSelector((store) => store.posts.isLoadingNewPost);\n\n  // 設定變數 prevIsUpdatingPost，儲存 isUpdatingPost 上一個的 state 狀態\n  const prevIsLoadingNewPost = usePrevious(isLoadingNewPost);\n\n  // 設定變數 errorMessage，從 store 的 posts 中拿到 errorMessage 的 state\n  const errorMessage = useSelector((store) => store.users.errorMessage);\n\n  // 是否正在點擊'Publish'按鈕，預設為 false\n  const isSubmit = useRef(false);\n\n  const history = useHistory();\n\n  // 執行提交功能\n  const handleSubmit = () => {\n    // e.preventDefault();\n\n    // 將錯誤訊息清除\n    //dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\n    dispatch(setErrorMessage(null));\n\n    // 如果正在點擊 'Publish' 按鈕，不進行任何動作\n    if (isSubmit.current) return;\n\n    // 否則，將正在點擊 'Publish' 按鈕狀態設為 true\n    isSubmit.current = true;\n\n    // 新增文章：dispatch 一個名為 'newPost' 的 action 到 postReducer，並將 id、title、content 帶入 action 中\n    dispatch(newPost(title, content));\n\n    // 2. 新增文章後清除 newPostResponse => 拿到 redux thunk return 的 Promise，然後處理\n    // dispatch(newPost(title, content)).then((newPostResponse) => {\n    //   if (newPostResponse && newPostResponse.id) {\n    //     history.push('/posts/' + newPostResponse.id);\n    //   }\n    // });\n  };\n\n  //  1.  新增文章後清除 newPostResponse 的 state\n  // newPostResponse => 將 setNewPostResponse 清空\n\n  // useEffect(() => {\n  //   return () => {\n  //     dispatch(setNewPostResponse(null));\n  //   };\n  // });\n\n  // useEffect(() => {\n  //   if (newPostResponse && newPostResponse.id) {\n  //     history.push('/posts/' + newPostResponse.id);\n  //   }\n  // }, [newPostResponse, history]);\n\n  // 3. 利用 IsLoadingNewPost 的狀態控制\n  // 發 request 之前，isLoadingNewPost: false, prevIsLoadingNewPost: false\n  // request,isLoadingNewPost: true, prevIsLoadingNewPost: false\n  // response,isLoadingNewPost: true, prevIsLoadingNewPost: true\n\n  useEffect(() => {\n    if (!isLoadingNewPost && prevIsLoadingNewPost) {\n      if (newPostResponse && newPostResponse.id) {\n        history.push('/posts/' + newPostResponse.id);\n      }\n    }\n  }, [newPostResponse, history, isLoadingNewPost, prevIsLoadingNewPost]);\n\n  // 新增文章後清除 errorMessage\n  // => 將 setErrorMessage 清空\n  useEffect(() => {\n    return () => {\n      dispatch(setErrorMessage(null));\n    };\n  }, [dispatch]);\n\n  return (\n    <>\n      <PageTitle>New Post</PageTitle>\n      {/* 點擊 Publish 按鈕提交後，表單執行 handleSubmit() */}\n      <Form onSubmit={handleSubmit}>\n        <div>\n          <input\n            className=\"form-title\"\n            placeholder=\"Title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          <textarea\n            className=\"form-textarea\"\n            placeholder=\"Say something...\"\n            rows=\"15\"\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"form-btn\">\n          Publish\n        </button>\n\n        {/* 有錯誤訊息時，顯示在此 */}\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </Form>\n    </>\n  );\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useParams, useHistory } from 'react-router-dom';\nimport {\n  getPost,\n  updatePost,\n  setErrorMessage,\n} from '../../redux/reducers/postReducer';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nconst PageTitle = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: 36px;\n  text-weight: 600;\n`;\n\nconst Form = styled.form`\n  width: 80%;\n  min-width: 40px;\n  display: flex;\n  flex-direction: column;\n  margin: 40px auto;\n  padding: 40px;\n  min-height: 360px;\n  border: 1.2px solid rgba(200, 200, 200, 0.5);\n  box-shadow: 1px 1px 3px #fbfbfb;\n  border-radius: 5px;\n  font-family: '微軟正黑體';\n  word-wrap: break-word;\n`;\n\n// 儲存上一個 state 狀態的 hook （引用別人事先寫好的）\nfunction usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport default function EditPostPage() {\n  // 取得 URL 上 id 的參數\n  const { id } = useParams();\n\n  // 設定 title 的 state\n  const [title, setTitle] = useState('');\n\n  // 設定 textArea 的 state\n  const [textArea, setTextArea] = useState('');\n\n  // 設定變數 dispatch，之後可以將 action 傳送到 reducer 中\n  const dispatch = useDispatch();\n\n  // 設定變數 post，從 store 的 posts 中拿到 post 的 state\n  const post = useSelector((store) => store.posts.post);\n\n  // 設定變數 newPostResponse，從 store 的 posts 中拿到 newPostResponse 的 state\n  const newPostResponse = useSelector((store) => store.posts.newPostResponse);\n\n  // 設定變數 isUpdatingPost，從 store 的 posts 中拿到 isUpdatingPost 的 state\n  const isUpdatingPost = useSelector((store) => store.posts.isUpdatingPost);\n\n  // 設定變數 prevIsUpdatingPost，儲存 isUpdatingPost 上一個的 state 狀態\n  const prevIsUpdatingPost = usePrevious(isUpdatingPost);\n\n  // 設定變數 errorMessage，從 store 的 posts 中拿到 errorMessage 的 state\n  const errorMessage = useSelector((store) => store.posts.errorMessage);\n\n  // 是否正在點擊'Update'按鈕，預設為 false\n  const isSubmit = useRef(false);\n\n  const history = useHistory();\n  console.log(post);\n\n  // 拿到修改前此文章的標題與內容\n  useEffect(() => {\n    // 拿到單一文章的內容：\n    //dispatch 一個名為 'getPost' 的 action 到 postReducer，並將 id 帶入 action 中\n    // 將回傳資料中的 title、body，設為欄位的預設值\n    dispatch(getPost(id)).then((post) => {\n      // console.log(post);\n      setTitle(post[0].title);\n      setTextArea(post[0].body);\n    });\n  }, [id, dispatch]);\n\n  // 利用 isUpdatingPost 的狀態控制：\n  // 發 request 之前，isUpdatingPost: false, prevIsUpdatingPost: false\n  // request,isUpdatingPost: true, prevIsUpdatingPost: false\n  // response,isUpdatingPost: true, prevIsUpdatingPost: true\n\n  useEffect(() => {\n    if (!isUpdatingPost && prevIsUpdatingPost) {\n      if (newPostResponse && newPostResponse.id) {\n        history.push('/posts/' + newPostResponse.id);\n      }\n    }\n  }, [newPostResponse, history, isUpdatingPost, prevIsUpdatingPost]);\n\n  // 執行提交功能\n  const handleEditPost = () => {\n    // e.preventDefault();\n\n    // 將錯誤訊息清除\n    //dispatch 一個名為 'setErrorMessage' 的 action 到 postReducer，讓 errorMessage 的狀態為 null\n    dispatch(setErrorMessage(null));\n\n    // 如果正在點擊 'Update' 按鈕，不進行任何動作\n    if (isSubmit.current) return;\n\n    // 否則，將正在點擊 'Update' 按鈕狀態設為 true\n    isSubmit.current = true;\n\n    // 編輯文章：dispatch 一個名為 'updatePost' 的 action 到 postReducer，並將 id、title、textArea 帶入 action 中\n    dispatch(updatePost(id, title, textArea));\n  };\n\n  return (\n    <>\n      <PageTitle>Update Post</PageTitle>\n      {/* 點擊 Publish 按鈕提交後，表單執行 handleSubmit() */}\n      <Form onSubmit={handleEditPost}>\n        <div>\n          <input\n            className=\"form-title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n          />\n        </div>\n        <div>\n          <textarea\n            className=\"form-textarea\"\n            rows=\"15\"\n            value={textArea}\n            onChange={(e) => setTextArea(e.target.value)}\n          />\n        </div>\n        <button type=\"submit\" className=\"form-btn\">\n          Update\n        </button>\n\n        {/* 有錯誤訊息時，顯示在此 */}\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </Form>\n    </>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserLogout } from '../../redux/reducers/userReducer';\nimport { setAuthToken } from '../../utils';\n\nconst HeaderContainer = styled.div`\n  height: 64px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  border-bottom: solid 1px rgba(0, 0, 0, 0.3);\n  padding: 0px 32px;\n  background: white;\n`;\n\nconst Brand = styled.div`\n  font-size: 32px;\n  font-weight: bold;\n`;\n\nconst NavbarList = styled.div`\n  display: flex;\n  align-items: center;\n  height: 64px;\n`;\n\nconst Nav = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  box-sizing: border-box;\n  width: 100px;\n  cursor: pointer;\n  color: black;\n  text-decoration: none;\n\n  ${(props) => props.$active && `background-color: rgba(0,0,0,0.1)`};\n`;\n\nconst LeftContainer = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${NavbarList} {\n    margin-left: 64px;\n  }\n`;\n\nexport default function Header() {\n  const location = useLocation();\n  const history = useHistory();\n\n  // 設定變數 dispatch，之後可以將 action 傳送到 reducer 中\n  const dispatch = useDispatch();\n\n  // 設定變數 user，從 store 的 users 中拿到 user 的 state\n  const user = useSelector((store) => store.users.user);\n\n  // 登出\n  const handleLogout = () => {\n    // 將 token 設為空\n    setAuthToken('');\n\n    // dispatch 一個名為 setUserLogout 的 action，\n    // 可將 user 的 state 設為 null\n    dispatch(setUserLogout());\n\n    // 如果登出時當前頁不是首頁 => 回到首頁\n    if (location.pathname !== '/') {\n      history.push('/');\n    }\n  };\n\n  return (\n    <HeaderContainer>\n      <LeftContainer>\n        <Brand>Blog</Brand>\n        <NavbarList>\n          <Nav to=\"/\" $active={location.pathname === '/'}>\n            Posts\n          </Nav>\n\n          {/* 使用者登入時顯示 Publish 欄位，讓登入後的使用者可以新增文章 */}\n          {user && (\n            <Nav to=\"/new-post\" $active={location.pathname === '/new-post'}>\n              Publish\n            </Nav>\n          )}\n\n          <Nav to=\"/about\" $active={location.pathname === '/about'}>\n            About\n          </Nav>\n        </NavbarList>\n      </LeftContainer>\n\n      <NavbarList>\n        {/* 使用者未登入時顯示 Sign Up 欄位，讓使用者可以註冊  */}\n        {!user && (\n          <Nav to=\"/register\" $active={location.pathname === '/register'}>\n            Sign Up\n          </Nav>\n        )}\n\n        {/* 使用者未登入時顯示 Log In 欄位，讓使用者可以登入  */}\n        {!user && (\n          <Nav to=\"/login\" $active={location.pathname === '/login'}>\n            Log In\n          </Nav>\n        )}\n\n        {/* 使用者登入時顯示 Log Out 欄位，讓使用者可以登出  */}\n        {user && (\n          // 點擊 Log Out 後,執行 handleLogout\n          <Nav to=\"/login\" onClick={handleLogout}>\n            Log Out\n          </Nav>\n        )}\n      </NavbarList>\n    </HeaderContainer>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst FooterContainer = styled.div`\n  margin: 30px 0;\n  font-family: '微軟正黑體';\n  font-weight: 500;\n  text-align: center;\n  letter-spacing: 1.2px;\n`;\n\nexport default function Footer() {\n  return (\n    <FooterContainer>\n      <div>- React Blog Homework from Lidemy {' ♥ '} -</div>\n    </FooterContainer>\n  );\n}\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport '../../index.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport LoginPage from '../../pages/LoginPage';\nimport RegisterPage from '../../pages/RegisterPage';\nimport HomePage from '../../pages/HomePage';\nimport PostPage from '../../pages/PostPage';\nimport AboutPage from '../../pages/AboutPage';\nimport NewPostPage from '../../pages/NewPostPage';\nimport EditPostPage from '../../pages/EditPostPage';\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport { useDispatch } from 'react-redux';\nimport { getAuthToken } from '../../utils';\nimport { getToken } from '../../redux/reducers/userReducer';\n\nconst Root = styled.div`\n  padding-top: 64px;\n`;\n\nfunction App() {\n  // 設定變數 dispatch，之後可以將 action 傳送到 reducer 中\n  const dispatch = useDispatch();\n\n  // 註冊/登入機制\n  useEffect(() => {\n    // 如果 localStorage 有名為 'token' 的 token\n    if (getAuthToken()) {\n      // dispatch 一個名為 'getToken' 的 action 到 userReducer\n      dispatch(getToken());\n    }\n  }, [dispatch]);\n\n  return (\n    <Root>\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route exact path=\"/about\">\n            <AboutPage />\n          </Route>\n          <Route exact path=\"/posts/:id\">\n            <PostPage />\n          </Route>\n          <Route exact path=\"/new-post\">\n            <NewPostPage />\n          </Route>\n          <Route path=\"/edit-post/:id\">\n            <EditPostPage />\n          </Route>\n          <Route exact path=\"/register\">\n            <RegisterPage />\n          </Route>\n          <Route exact path=\"/login\">\n            <LoginPage />\n          </Route>\n        </Switch>\n      </Router>\n      <Footer />\n    </Root>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport postReducer from './reducers/postReducer';\r\nimport userReducer from './reducers/userReducer';\r\n\r\n// 將 postReducer、userReducer 合併存在 store 內\r\nconst store = configureStore({\r\n  reducer: {\r\n    posts: postReducer,\r\n    users: userReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}